import 'package:flutter/material.dart';

void main() {
  runApp(VangtiChaiApp()); // Call our custom app widget VangtiChaiApp
}

class VangtiChaiApp extends StatelessWidget {
  // Stateless because the app-level config (theme, routes, etc.) won’t change.
  const VangtiChaiApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'VangtiChai',
      theme: ThemeData(
        primarySwatch: Colors.green,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: VangtiChai(),
    );
  }
}

class VangtiChai extends StatefulWidget {
  // Why stateful?

  // Needs to update UI whenever:

  // User enters digits

  // User hits CLR

  // Change calculation result updates
  const VangtiChai({super.key});

  @override
  State<VangtiChai> createState() => _VangtiChaiState();
}

class _VangtiChaiState extends State<VangtiChai> {
  String amountStr = "";
  Map<int, int> changeMap = {};

    //   State Variables

    // String amountStr = "";
    // Map<int, int> changeMap = {};
    // amountStr → what user has typed, e.g. "873".

    // changeMap → the denomination breakdown:

    // {
    //   500: 1,
    //   100: 3,
    //   ...
    // }

  void onDigitPressed(String digit) {
    setState(() {
      // Prevent entering amounts larger than reasonable limit
      if (amountStr.length < 8) {
        amountStr += digit;
        calculate();
      }
    });
  }

  void onClear() {
    setState(() {
      amountStr = "";
      changeMap.clear();
    });
  }

  void calculate() {
    int amount = int.tryParse(amountStr) ?? 0;
    changeMap = calculateChange(amount);
  }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text("VangtiChai"),
//         backgroundColor: Colors.green[700],
//         foregroundColor: Colors.white,
//       ),
//       body: LayoutBuilder(
//         builder: (context, constraints) {
//           if (constraints.maxWidth < 600) {
//             return Column(
//               children: [
//                 BuildAmountPanel(amountStr: amountStr), // Amount panel on top
//                 SizedBox(height: 16),
//                 Expanded(
//                   child: buildPortrait(),                // Row below with change and keypad
//                 ),
//                 ],
//               );
//           } else {
//             return buildLandscape();
//           }
//         },
//       ),

//     //    body: Column(
//     //   children: [
//     //     BuildAmountPanel(amountStr: amountStr), // Amount panel on top
//     //     SizedBox(height: 16),
//     //     Expanded(
//     //       child: buildPortrait(),                // Row below with change and keypad
//     //     ),
//     //   ],
//     // ),
//   );
// }


  @override
  Widget build(BuildContext context) {
    final orientation = MediaQuery.of(context).orientation;

    return Scaffold(
      appBar: AppBar(
        title: Text("VangtiChai"),
        backgroundColor: Colors.green[700],
        foregroundColor: Colors.white,
      ),
      body: orientation == Orientation.portrait
          ? Column(
              children: [
                BuildAmountPanel(amountStr: amountStr),
                SizedBox(height: 16),
                Expanded(
                  child: buildPortrait(),
                ),
              ],
            )
          : buildLandscape(),
    );
  }


  Widget buildPortrait() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          Expanded(flex: 2, child: buildChangeTable()),
          SizedBox(width: 16),
          Expanded(flex: 3, child: buildKeypad()),
        ],
      ),
    );
  }

  Widget buildLandscape() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          Flexible(flex: 2, child: buildChangeTableLandscape()),
          SizedBox(height: 16),
          Flexible(flex: 3, child: buildLandscapeKeypad()),
        ],
      ),
    );
  }

  Widget buildChangeTable() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Amount display
            //buildAmountPanel(amountStr: amountStr),
            //SizedBox(height: 16),
            
            // Change breakdown
            Text(
              "Change Breakdown:",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.grey[800],
              ),
            ),
            SizedBox(height: 8),
            
            Expanded(
              child: changeMap.isEmpty 
                ? Center(
                    child: Text(
                      "Enter amount to see change",
                      style: TextStyle(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                    ),
                  )
                : SingleChildScrollView(
                    child: Column(
                      children: changeMap.entries
                          .where((e) => e.value > 0)
                          .map((e) => Container(
                            margin: EdgeInsets.symmetric(vertical: 4),
                            padding: EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(color: Colors.grey[300]!),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "৳${e.key}",
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                Container(
                                  padding: EdgeInsets.symmetric(
                                    horizontal: 12,
                                    vertical: 4,
                                  ),
                                  decoration: BoxDecoration(
                                    color: Colors.green[100],
                                    borderRadius: BorderRadius.circular(16),
                                  ),
                                  child: Text(
                                    "${e.value}",
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.green[800],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ))
                          .toList(),
                    ),
                  ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildChangeTableLandscape() {
  final entries = changeMap.entries.where((e) => e.value > 0).toList();

  Widget buildEntryRow(MapEntry<int, int> e) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 4),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            "৳${e.key}",
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
          ),
          Container(
            padding: EdgeInsets.symmetric(horizontal: 12, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.green[100],
              borderRadius: BorderRadius.circular(16),
            ),
            child: Text(
              "${e.value}",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.green[800],
              ),
            ),
          ),
        ],
      ),
    );
  }

  if (entries.isEmpty) {
    return Center(
      child: Text(
        "Enter amount to see change",
        style: TextStyle(color: Colors.grey[600], fontSize: 16),
      ),
    );
  }

  int mid = (entries.length / 2).ceil();
  final leftEntries = entries.sublist(0, mid);
  final rightEntries = entries.sublist(mid);

  return Card(
    elevation: 4,
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: SingleChildScrollView(
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: Column(
                children: leftEntries.map(buildEntryRow).toList(),
              ),
            ),
            SizedBox(width: 16),
            Expanded(
              child: Column(
                children: rightEntries.map(buildEntryRow).toList(),
              ),
            ),
          ],
        ),
      ),
    ),
  );
}


  Widget buildKeypad() {
    List<String> keys = [
      "1", "2", "3",
      "4", "5", "6", 
      "7", "8", "9",
      "0", "", "CLR"
    ];

    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: GridView.count(
          crossAxisCount: 3,
          shrinkWrap: true,
          crossAxisSpacing: 12,
          mainAxisSpacing: 12,
          children: keys.map((key) {
            if (key.isEmpty) {
              return SizedBox(); // Empty space
            }
            
            bool isClear = key == "CLR";
            
            return ElevatedButton(
              onPressed: () {
                if (isClear) {
                  onClear();
                } else {
                  onDigitPressed(key);
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: isClear ? Colors.red[400] : Colors.green[600],
                foregroundColor: Colors.white,
                elevation: 3,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                textStyle: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              child: Text(key),
            );
          }).toList(),
        ),
      ),
    );
  }

  Widget buildLandscapeKeypad() {
  List<List<String>> rows = [
    ["1", "2", "3", "4"],
    ["5", "6", "7", "8"],
    ["9", "0", "", "CLR"]
  ];

  return Center(
    child: Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, 
          children: rows.map((rowKeys) {
            return Padding(
              padding: const EdgeInsets.symmetric(vertical: 6.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: rowKeys.map((key) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 6.0),
                    child: ElevatedButton(
                      onPressed: () {
                        if (key == "CLR") {
                          onClear();
                        } else {
                          onDigitPressed(key);
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: key == "CLR"
                            ? Colors.red[400]
                            : Colors.green[600],
                        foregroundColor: Colors.white,
                        elevation: 3,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      child: Text(key),
                    ),
                  );
                }).toList(),
              ),
            );
          }).toList(),
        ),
      ),
    ),
  );
}

}

class BuildAmountPanel extends StatelessWidget {
  const BuildAmountPanel ({
    super.key,
    required this.amountStr,
  });

  final String amountStr;

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.green[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.green[200]!),
      ),
      child: Center(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Taka:",
              style: TextStyle(
                fontSize: 40,
                color: Colors.green[700],
                fontWeight: FontWeight.w500,
              ),
            ),
            Text(
              amountStr.isEmpty ? '0' : amountStr,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.green[800],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

Map<int, int> calculateChange(int amount) {
  List<int> notes = [500, 100, 50, 20, 10, 5, 2, 1];
  Map<int, int> result = {};
  int remaining = amount;
  
  for (var note in notes) {
    int count = remaining ~/ note;
    result[note] = count;
    remaining %= note;
  }
  
  return result;
}